<!DOCTYPE html>
<html>
  <head>
    <title>JavaScript Audio Write Example</title>
  </head>
  <body>
	  <button type="button" id="startBtn" onclick="init()">Start</button>
  <!--
frequency
<input type="range" id="fIn" min="-52" max="54" oninput="show()" value="0" step="1" />
<span id="fOut"></span><br>
-->
volume
<input type="range" id="vIn" min="0" max="100" oninput="show()" />
<span id="vOut"></span><br>
<span id="freqs"></span><br />
<br />
<canvas id="visualizer"></canvas>

<script type="text/javascript">
//redirect to https if on github
if (window.location.host.substr(-10) == '.github.io' && window.location.protocol != 'https:') {
    window.location.protocol = 'https:';
}


var notes = [];
notes[0]={ n:'C0', h:16.35};
notes[1]={ n:'C#0/Db0', h:17.32};
notes[2]={ n:'D0', h:18.35};
notes[3]={ n:'D#0/Eb0', h:19.45};
notes[4]={ n:'E0', h:20.6};
notes[5]={ n:'F0', h:21.83};
notes[6]={ n:'F#0/Gb0', h:23.12};
notes[7]={ n:'G0', h:24.5};
notes[8]={ n:'G#0/Ab0', h:25.96};
notes[9]={ n:'A0', h:27.5};
notes[10]={ n:'A#0/Bb0', h:29.14};
notes[11]={ n:'B0', h:30.87};
notes[12]={ n:'C1', h:32.7};
notes[13]={ n:'C#1/Db1', h:34.65};
notes[14]={ n:'D1', h:36.71};
notes[15]={ n:'D#1/Eb1', h:38.89};
notes[16]={ n:'E1', h:41.2};
notes[17]={ n:'F1', h:43.65};
notes[18]={ n:'F#1/Gb1', h:46.25};
notes[19]={ n:'G1', h:49};
notes[20]={ n:'G#1/Ab1', h:51.91};
notes[21]={ n:'A1', h:55};
notes[22]={ n:'A#1/Bb1', h:58.27};
notes[23]={ n:'B1', h:61.74};
notes[24]={ n:'C2', h:65.41};
notes[25]={ n:'C#2/Db2', h:69.3};
notes[26]={ n:'D2', h:73.42};
notes[27]={ n:'D#2/Eb2', h:77.78};
notes[28]={ n:'E2', h:82.41};
notes[29]={ n:'F2', h:87.31};
notes[30]={ n:'F#2/Gb2', h:92.5};
notes[31]={ n:'G2', h:98};
notes[32]={ n:'G#2/Ab2', h:103.83};
notes[33]={ n:'A2', h:110};
notes[34]={ n:'A#2/Bb2', h:116.54};
notes[35]={ n:'B2', h:123.47};
notes[36]={ n:'C3', h:130.81};
notes[37]={ n:'C#3/Db3', h:138.59};
notes[38]={ n:'D3', h:146.83};
notes[39]={ n:'D#3/Eb3', h:155.56};
notes[40]={ n:'E3', h:164.81};
notes[41]={ n:'F3', h:174.61};
notes[42]={ n:'F#3/Gb3', h:185};
notes[43]={ n:'G3', h:196};
notes[44]={ n:'G#3/Ab3', h:207.65};
notes[45]={ n:'A3', h:220};
notes[46]={ n:'A#3/Bb3', h:233.08};
notes[47]={ n:'B3', h:246.94};
notes[48]={ n:'C4', h:261.63};
notes[49]={ n:'C#4/Db4', h:277.18};
notes[50]={ n:'D4', h:293.66};
notes[51]={ n:'D#4/Eb4', h:311.13};
notes[52]={ n:'E4', h:329.63};
notes[53]={ n:'F4', h:349.23};
notes[54]={ n:'F#4/Gb4', h:369.99};
notes[55]={ n:'G4', h:392};
notes[56]={ n:'G#4/Ab4', h:415.3};
notes[57]={ n:'A4', h:440};
notes[58]={ n:'A#4/Bb4', h:466.16};
notes[59]={ n:'B4', h:493.88};
notes[60]={ n:'C5', h:523.25};
notes[61]={ n:'C#5/Db5', h:554.37};
notes[62]={ n:'D5', h:587.33};
notes[63]={ n:'D#5/Eb5', h:622.25};
notes[64]={ n:'E5', h:659.25};
notes[65]={ n:'F5', h:698.46};
notes[66]={ n:'F#5/Gb5', h:739.99};
notes[67]={ n:'G5', h:783.99};
notes[68]={ n:'G#5/Ab5', h:830.61};
notes[69]={ n:'A5', h:880};
notes[70]={ n:'A#5/Bb5', h:932.33};
notes[71]={ n:'B5', h:987.77};
notes[72]={ n:'C6', h:1046.5};
notes[73]={ n:'C#6/Db6', h:1108.73};
notes[74]={ n:'D6', h:1174.66};
notes[75]={ n:'D#6/Eb6', h:1244.51};
notes[76]={ n:'E6', h:1318.51};
notes[77]={ n:'F6', h:1396.91};
notes[78]={ n:'F#6/Gb6', h:1479.98};
notes[79]={ n:'G6', h:1567.98};
notes[80]={ n:'G#6/Ab6', h:1661.22};
notes[81]={ n:'A6', h:1760};
notes[82]={ n:'A#6/Bb6', h:1864.66};
notes[83]={ n:'B6', h:1975.53};
notes[84]={ n:'C7', h:2093};
notes[85]={ n:'C#7/Db7', h:2217.46};
notes[86]={ n:'D7', h:2349.32};
notes[87]={ n:'D#7/Eb7', h:2489.02};
notes[88]={ n:'E7', h:2637.02};
notes[89]={ n:'F7', h:2793.83};
notes[90]={ n:'F#7/Gb7', h:2959.96};
notes[91]={ n:'G7', h:3135.96};
notes[92]={ n:'G#7/Ab7', h:3322.44};
notes[93]={ n:'A7', h:3520};
notes[94]={ n:'A#7/Bb7', h:3729.31};
notes[95]={ n:'B7', h:3951.07};
notes[96]={ n:'C8', h:4186.01};
notes[97]={ n:'C#8/Db8', h:4434.92};
notes[98]={ n:'D8', h:4698.63};
notes[99]={ n:'D#8/Eb8', h:4978.03};
notes[100]={ n:'E8', h:5274.04};
notes[101]={ n:'F8', h:5587.65};
notes[102]={ n:'F#8/Gb8', h:5919.91};
notes[103]={ n:'G8', h:6271.93};
notes[104]={ n:'G#8/Ab8', h:6644.88};
notes[105]={ n:'A8', h:7040};
notes[106]={ n:'A#8/Bb8', h:7458.62};
notes[107]={ n:'B8', h:7902.13};
//interesting:  http://www.phy.mtu.edu/~suits/Physicsofmusic.html

    var maxValue = 256;//based on Uint8Array possible values
	var audioCtx;
	var micSource;
	var analyser;
	var sampleRate;
	var gainNode;
	var hertzBinSize;
	var frequencyData;
	var buflen;

	function init() {
		document.getElementById("startBtn").style.display = "none";
		audioCtx = new (window.AudioContext || window.webkitAudioContext)();
		analyser = audioCtx.createAnalyser();
		analyser.smoothingTimeConstant = 0.2;//default is 0.8, less is more responsive
		analyser.minDecibels = -95;//-100 is default and is more sensitive (more noise)
		analyser.fftSize = 8192 * 4;//need at least 8192 to detect differences in low notes
		sampleRate = audioCtx.sampleRate;
		gainNode = audioCtx.createGain();
		gainNode.connect(audioCtx.destination);
		/*
		var oscillator1 = audioCtx.createOscillator();
		oscillator1.type = "sine";
		oscillator1.connect(gainNode);
		oscillator1.connect(analyser);
		oscillator1.start();
		*/

		hertzBinSize = sampleRate / analyser.fftSize;
		console.log("bin size: " + hertzBinSize);
		frequencyData = new Uint8Array(analyser.frequencyBinCount);
		buflen = frequencyData.length;
        navigator.getUserMedia({ audio: true }, successCallback, errorCallback);
		getTones();
	}

var volume;


function successCallback(stream) {
    micSource = audioCtx.createMediaStreamSource( stream );
    micSource.connect(gainNode);
	micSource.connect(analyser);
    show();
}
function errorCallback(err) {
    alert("The following error occurred: " + err.message);
}



function show() {
/*
  var fIn = document.getElementById("fIn").value;
  frequency = Math.round(100 * 349.2 * Math.pow(1.0594630943, fIn))/100;
  document.getElementById("fOut").innerHTML = frequency + ' Hz';
  oscillator1.frequency.value = frequency;
  */

  volume = document.getElementById("vIn").value / 100;
  document.getElementById("vOut").innerHTML = volume;
  gainNode.gain.value = volume;
}


function getNotes_Old(toneAry){
	var noteAry = [];
	if(toneAry && toneAry.length){
		for(var t=0; t<toneAry.length; t++){
			var tone = toneAry[t];
			for(var n=0; n<notes.length -1; n++){
				var note = notes[n];
				if(tone.hertz >= note.h){
					if(tone.hertz < notes[n+1].h){
						noteAry[t] = note.n;
					}
				}
			}
		}
	}
	return noteAry;
}

function dumpNotes(cutoff){
	var logstr = "";
	for(var n=0; n<notes.length -1; n++){
		var note = notes[n];
		if(note.power && note.power > cutoff){
			logstr += note.n + "=" + note.power + " ";
		}
	}
	if(logstr != "")console.log(logstr);
}

var freqAry = [];
//this basically lumps loud tones together and gets their avg frequency
function getTones() {
	analyser.getByteFrequencyData(frequencyData);
	var bins = [];
	var count = 0;
	var total = 0;
	var sum = 0;
	var cutoff = 20;//redundant with decibels?
	var nPtr = 0; //notePointer
	for(var i=0; i< buflen; i++){
		var fdat = frequencyData[i];
		var freq = i * hertzBinSize;//freq in hertz for this sample
		var curNote = notes[nPtr];
		var nextNote = notes[nPtr+1];
		//cut off halfway into the next note
		var hzLimit = curNote.h + ((nextNote.h - curNote.h)/2);
		if(freq < hzLimit){
			if(fdat > cutoff){
				sum += i;//bin numbers
				count++;
				total += fdat;
			}
		}else{
			if(count > 0){
				var binNum = sum/count;
				var bin = {};
				//round up
				var power = frequencyData[Math.ceil(binNum)];
				if(binNum > 0){
					//round down
					power = (power + frequencyData[Math.floor(binNum)])/2;
				}
				//notes[nPtr].power = power;
				//seems like it rounds the values too much?
				notes[nPtr].power = total / count;
				sum = 0;
				count = 0;
				total = 0;
			}else{
				notes[nPtr].power = 0;
			}
			//next note
			if(nPtr < notes.length -2){
				nPtr++;
			}
		}
	}
	if(bins.length > 0){
		freqAry = bins;
	}
	drawNotes();
	setTimeout(function(){ requestAnimationFrame(getTones) }, 50);
}

var canvas = document.getElementById("visualizer");
var ctx = canvas.getContext("2d");

function drawNotes(){
	canvas.height = notes.length * 10;
	canvas.width = maxValue + 120;
	ctx.textAlign="left";
	//ctx.clearRect(0,0,canvas.width, canvas.height);
	for(var n=0; n< notes.length; n++){
		ctx.fillText(notes[n].n, 65, n * 10);
		ctx.save();
		ctx.textAlign="right";
		ctx.fillText(notes[n].h + " Hz", 60, n * 10);
		ctx.restore();
	}
	ctx.save();
	//horzontal bars
	for(var n=0; n< notes.length; n++){
		var colString = 'hsl('+ 360*n/notes.length +',100%,80%)';
		ctx.fillStyle = colString;
		ctx.fillRect(120,n * 10,notes[n].power , -10);
	}
	ctx.restore();
}
  </script>
  </body>
</html>
